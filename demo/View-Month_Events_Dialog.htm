<!DOCTYPE html>

<html>

	<head>
	
		<title>MonthEventDialog View</title>
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	
		<script type="text/javascript" src="js/jquery-1.11.1.min.js"></script>
		<script type="text/javascript" src="js/jquery-ui-custom-1.11.2.min.js"></script>
    	<link rel="stylesheet" type="text/css" href="css/jquery-ui-custom-1.11.2.min.css" />
    
    	<script type="text/javascript" src="js/jquery.ui.touch-punch.js"></script>
    
		<link rel="stylesheet" type="text/css" href="../src/calenstyle.css" />
		<link rel="stylesheet" type="text/css" href="../src/calenstyle-jquery-ui-override.css" />
		<link rel="stylesheet" type="text/css" href="../src/calenstyle-iconfont.css" />
		<script type="text/javascript" src="../src/calenstyle.js"></script>
	
		<script type="text/javascript" src="js/CalJsonGenerator.js"></script>
	
		<style type="text/css">
		
			.calendarContOuter
			{
				position: absolute;
                left: 1px;
                right: 1px;
                top: 1px;
                bottom: 2px;
                /*
            	width: 1000px;
				height: 600px;
				margin: 0px auto;
            	*/
				font-size: 14px;
			}
			
			.cElemDatePicker
			{
				font-size: 14px;
			}
		
		</style>
	
		<script type="text/javascript">
		
			$(document).ready(function()
			{
			
				$(".calendarContOuter").CalenStyle(
				{
					visibleView: "MonthView",
				
					actionOnDayClickInMonthView: "DisplayEventListDialog",
				
					calDataSource: 
					[					
						{
							sourceFetchType: "DateRange",
							sourceType: "FUNCTION",
							source: function(fetchStartDate, fetchEndDate, durationStartDate, durationEndDate, oConfig, loadViewCallback)
							{
								var calObj1 = this;
								calObj1.incrementDataLoadingCount(1);
							
								var oEventResponse = generateJsonEvents(fetchStartDate, fetchEndDate);
								if(oEventResponse != undefined)
								{
									if(oEventResponse[0])
									{
										calObj1.parseDataSource("eventSource", oEventResponse[1], durationStartDate, durationEndDate, loadViewCallback, oConfig, false);
									}
								}
							}
						}
					],
				
					saveChangesOnEventDrop: function(oDraggedEvent, startDateBeforeDrop, endDateBeforeDrop, startDateAfterDrop, endDateAfterDrop)
					{
						var calObj1 = this;
					
						console.log(oDraggedEvent);
						console.log(startDateAfterDrop);
						console.log(endDateAfterDrop);
					
						//calObj1.revertToOriginalEvent(oDraggedEvent, startDateBeforeDrop, endDateBeforeDrop);
					}
				
				});
			
			});
			
		</script>
		
	</head>
	
	<body>
    
		<div class="calendarContOuter"></div>
    
	</body>
	
</html>